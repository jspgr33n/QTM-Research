results <- fn_extract_column(clean_image,box_param)
results$cropped_image
# Extract value from box
box_value   <- results$raw_tibble[1,1]
# Extract numeric value from box
regexp <- "[[:digit:]]+"      # This ensures that we only extract digits
value  <- as.numeric(str_extract(box_value, regexp))
if(i == 1){
value = value
} else{
if(box_value == ""){
value <- data[i-1,"index"]
} else {
value <- data[i-1,"index"] + 1
}
}
data[i,"box_value"] <- box_value
data[i,"index"]     <- value
}
# Process data to concatenate organization names that
# are written across multiple rows
data <- data %>% ungroup()
data <- data %>% group_by(index) %>%
summarise(box_value = paste(box_value,collapse = "|"),
name = paste(name,collapse = " ")) %>% ungroup()
data
# Step 4: Extract expiration date
box_param    <- list()
box_param$width  = (image_param$width)*0.2
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.6
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_mou_signing = results$raw_tibble[,1]
if( length(list_mou_signing) == nrow(data)){
data$list_mou_signing <- list_mou_signing
} else {
print("Number of rows of MOU does not match")
}
# Step 5: Extract expiration date
box_param    <- list()
box_param$width  = (image_param$width)*0.18
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.8
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_mou_validity = results$raw_tibble[,1]
if( length(list_mou_validity) == nrow(data)){
data$list_mou_validity <- list_mou_validity
} else {
print("Number of rows of MOU validity does not match")
}
data
# Define which page to crop
set_page <- 9
# Import configuration data for each page
config_data  <- read_excel(paste0(dirhat,"param/param_ocr.xlsx")) %>%
as.data.frame()
# Initial Crop
rotate_param       <- config_data[set_page,"rotate_param"]  # 0.75, stats for p1
image_param        <- list()
image_param$width  <- config_data[set_page,"width"]         # 1750
image_param$height <- config_data[set_page,"height"]        # 1950
image_param$hstart <- config_data[set_page,"hstart"]        # 100
image_param$vstart <- config_data[set_page,"vstart"]        # 230
clean_image        <- fn_clean_image(image_filename = pngfile_list[set_page],
rotate_param = rotate_param)
clean_image        <- fn_crop_image(image_object = clean_image,
box_param = image_param)
image_param
### JAMES INSTRUCTIONS:
#  Tweak the values in the excel file until you make sure that
# we can properly crop and rotate the image in each page
# IMPORTANT: Double check in the PDF to make sure that the table
# starts in the right place
# Some pages seem to have a higher rotation than others
clean_image
# Step 1
box_param    <- list()
box_param$width  = (image_param$width)*0.5
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.1
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_organization_names = results$raw_tibble[,1]
total_rows = length(list_organization_names)
# Step 2: Create Data to fill
data <- tibble(box_value = rep(NA,total_rows),
index = rep(NA,total_rows),
name = list_organization_names)
# Step 3: Extract organization numbers
# This is done to properly extract the names of organizations
# that are written across more than one line.
for(i in 1:total_rows){
print(i)
#i          <- 15
box_param        <- list()
box_param$width  <- (image_param$width)*0.07
box_param$height <- (image_param$height / total_rows)
box_param$hstart <- (image_param$width)*0.03
box_param$vstart <- (i-1)*(image_param$height / total_rows)
# Conduct OCR
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
# Extract value from box
box_value   <- results$raw_tibble[1,1]
# Extract numeric value from box
regexp <- "[[:digit:]]+"      # This ensures that we only extract digits
value  <- as.numeric(str_extract(box_value, regexp))
if(i == 1){
value = value
} else{
if(box_value == ""){
value <- data[i-1,"index"]
} else {
value <- data[i-1,"index"] + 1
}
}
data[i,"box_value"] <- box_value
data[i,"index"]     <- value
}
# Process data to concatenate organization names that
# are written across multiple rows
data <- data %>% ungroup()
data <- data %>% group_by(index) %>%
summarise(box_value = paste(box_value,collapse = "|"),
name = paste(name,collapse = " ")) %>% ungroup()
data
# Step 4: Extract expiration date
box_param    <- list()
box_param$width  = (image_param$width)*0.2
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.6
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_mou_signing = results$raw_tibble[,1]
if( length(list_mou_signing) == nrow(data)){
data$list_mou_signing <- list_mou_signing
} else {
print("Number of rows of MOU does not match")
}
# Step 5: Extract expiration date
box_param    <- list()
box_param$width  = (image_param$width)*0.18
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.8
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_mou_validity = results$raw_tibble[,1]
if( length(list_mou_validity) == nrow(data)){
data$list_mou_validity <- list_mou_validity
} else {
print("Number of rows of MOU validity does not match")
}
data
data
data
View(data)
#------------------------------------------------------------------------------#
#------------- III. INITIAL PROCESS IMAGE DATA --------------------------------#
#------------------------------------------------------------------------------#
# Define which page to crop
set_page <- 9
# Import configuration data for each page
config_data  <- read_excel(paste0(dirhat,"param/param_ocr.xlsx")) %>%
as.data.frame()
# Initial Crop
rotate_param       <- config_data[set_page,"rotate_param"]  # 0.75, stats for p1
image_param        <- list()
image_param$width  <- config_data[set_page,"width"]         # 1750
image_param$height <- config_data[set_page,"height"]        # 1950
image_param$hstart <- config_data[set_page,"hstart"]        # 100
image_param$vstart <- config_data[set_page,"vstart"]        # 230
clean_image        <- fn_clean_image(image_filename = pngfile_list[set_page],
rotate_param = rotate_param)
clean_image        <- fn_crop_image(image_object = clean_image,
box_param = image_param)
image_param
### JAMES INSTRUCTIONS:
#  Tweak the values in the excel file until you make sure that
# we can properly crop and rotate the image in each page
# IMPORTANT: Double check in the PDF to make sure that the table
# starts in the right place
# Some pages seem to have a higher rotation than others
clean_image
#------------------------------------------------------------------------------#
# Step 1
box_param    <- list()
box_param$width  = (image_param$width)*0.5
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.1
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_organization_names = results$raw_tibble[,1]
total_rows = length(list_organization_names)
# Step 2: Create Data to fill
data <- tibble(box_value = rep(NA,total_rows),
index = rep(NA,total_rows),
name = list_organization_names)
# Step 3: Extract organization numbers
# This is done to properly extract the names of organizations
# that are written across more than one line.
for(i in 1:total_rows){
print(i)
#i          <- 15
box_param        <- list()
box_param$width  <- (image_param$width)*0.07
box_param$height <- (image_param$height / total_rows)
box_param$hstart <- (image_param$width)*0.03
box_param$vstart <- (i-1)*(image_param$height / total_rows)
# Conduct OCR
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
# Extract value from box
box_value   <- results$raw_tibble[1,1]
# Extract numeric value from box
regexp <- "[[:digit:]]+"      # This ensures that we only extract digits
value  <- as.numeric(str_extract(box_value, regexp))
if(i == 1){
value = value
} else{
if(box_value == ""){
value <- data[i-1,"index"]
} else {
value <- data[i-1,"index"] + 1
}
}
data[i,"box_value"] <- box_value
data[i,"index"]     <- value
}
# Process data to concatenate organization names that
# are written across multiple rows
data <- data %>% ungroup()
data <- data %>% group_by(index) %>%
summarise(box_value = paste(box_value,collapse = "|"),
name = paste(name,collapse = " ")) %>% ungroup()
data
# Step 4: Extract expiration date
box_param    <- list()
box_param$width  = (image_param$width)*0.2
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.6
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_mou_signing = results$raw_tibble[,1]
if( length(list_mou_signing) == nrow(data)){
data$list_mou_signing <- list_mou_signing
} else {
print("Number of rows of MOU does not match")
}
# Step 5: Extract expiration date
box_param    <- list()
box_param$width  = (image_param$width)*0.18
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.8
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_mou_validity = results$raw_tibble[,1]
if( length(list_mou_validity) == nrow(data)){
data$list_mou_validity <- list_mou_validity
} else {
print("Number of rows of MOU validity does not match")
}
data
# Define which page to crop
set_page <- 9
# Import configuration data for each page
config_data  <- read_excel(paste0(dirhat,"param/param_ocr.xlsx")) %>%
as.data.frame()
# Initial Crop
rotate_param       <- config_data[set_page,"rotate_param"]  # 0.75, stats for p1
image_param        <- list()
image_param$width  <- config_data[set_page,"width"]         # 1750
image_param$height <- config_data[set_page,"height"]        # 1950
image_param$hstart <- config_data[set_page,"hstart"]        # 100
image_param$vstart <- config_data[set_page,"vstart"]        # 230
clean_image        <- fn_clean_image(image_filename = pngfile_list[set_page],
rotate_param = rotate_param)
clean_image        <- fn_crop_image(image_object = clean_image,
box_param = image_param)
image_param
### JAMES INSTRUCTIONS:
#  Tweak the values in the excel file until you make sure that
# we can properly crop and rotate the image in each page
# IMPORTANT: Double check in the PDF to make sure that the table
# starts in the right place
# Some pages seem to have a higher rotation than others
clean_image
#------------------------------------------------------------------------------#
# Step 1
box_param    <- list()
box_param$width  = (image_param$width)*0.5
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.1
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_organization_names = results$raw_tibble[,1]
total_rows = length(list_organization_names)
# Step 2: Create Data to fill
data <- tibble(box_value = rep(NA,total_rows),
index = rep(NA,total_rows),
name = list_organization_names)
# Step 3: Extract organization numbers
# This is done to properly extract the names of organizations
# that are written across more than one line.
for(i in 1:total_rows){
print(i)
#i          <- 15
box_param        <- list()
box_param$width  <- (image_param$width)*0.07
box_param$height <- (image_param$height / total_rows)
box_param$hstart <- (image_param$width)*0.03
box_param$vstart <- (i-1)*(image_param$height / total_rows)
# Conduct OCR
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
# Extract value from box
box_value   <- results$raw_tibble[1,1]
# Extract numeric value from box
regexp <- "[[:digit:]]+"      # This ensures that we only extract digits
value  <- as.numeric(str_extract(box_value, regexp))
if(i == 1){
value = value
} else{
if(box_value == ""){
value <- data[i-1,"index"]
} else {
value <- data[i-1,"index"] + 1
}
}
data[i,"box_value"] <- box_value
data[i,"index"]     <- value
}
# Process data to concatenate organization names that
# are written across multiple rows
data <- data %>% ungroup()
data <- data %>% group_by(index) %>%
summarise(box_value = paste(box_value,collapse = "|"),
name = paste(name,collapse = " ")) %>% ungroup()
data
# Step 4: Extract expiration date
box_param    <- list()
box_param$width  = (image_param$width)*0.2
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.6
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_mou_signing = results$raw_tibble[,1]
if( length(list_mou_signing) == nrow(data)){
data$list_mou_signing <- list_mou_signing
} else {
print("Number of rows of MOU does not match")
}
# Step 5: Extract expiration date
box_param    <- list()
box_param$width  = (image_param$width)*0.18
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.8
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_mou_validity = results$raw_tibble[,1]
if( length(list_mou_validity) == nrow(data)){
data$list_mou_validity <- list_mou_validity
} else {
print("Number of rows of MOU validity does not match")
}
data
# Define which page to crop
set_page <- 9
# Import configuration data for each page
config_data  <- read_excel(paste0(dirhat,"param/param_ocr.xlsx")) %>%
as.data.frame()
# Initial Crop
rotate_param       <- config_data[set_page,"rotate_param"]  # 0.75, stats for p1
image_param        <- list()
image_param$width  <- config_data[set_page,"width"]         # 1750
image_param$height <- config_data[set_page,"height"]        # 1950
image_param$hstart <- config_data[set_page,"hstart"]        # 100
image_param$vstart <- config_data[set_page,"vstart"]        # 230
clean_image        <- fn_clean_image(image_filename = pngfile_list[set_page],
rotate_param = rotate_param)
clean_image        <- fn_crop_image(image_object = clean_image,
box_param = image_param)
image_param
### JAMES INSTRUCTIONS:
#  Tweak the values in the excel file until you make sure that
# we can properly crop and rotate the image in each page
# IMPORTANT: Double check in the PDF to make sure that the table
# starts in the right place
# Some pages seem to have a higher rotation than others
clean_image
#------------- III. INITIAL PROCESS IMAGE DATA --------------------------------#
#------------------------------------------------------------------------------#
# Define which page to crop
set_page <- 9
# Import configuration data for each page
config_data  <- read_excel(paste0(dirhat,"param/param_ocr.xlsx")) %>%
as.data.frame()
# Initial Crop
rotate_param       <- config_data[set_page,"rotate_param"]  # 0.75, stats for p1
image_param        <- list()
image_param$width  <- config_data[set_page,"width"]         # 1750
image_param$height <- config_data[set_page,"height"]        # 1950
image_param$hstart <- config_data[set_page,"hstart"]        # 100
image_param$vstart <- config_data[set_page,"vstart"]        # 230
clean_image        <- fn_clean_image(image_filename = pngfile_list[set_page],
rotate_param = rotate_param)
clean_image        <- fn_crop_image(image_object = clean_image,
box_param = image_param)
image_param
### JAMES INSTRUCTIONS:
#  Tweak the values in the excel file until you make sure that
# we can properly crop and rotate the image in each page
# IMPORTANT: Double check in the PDF to make sure that the table
# starts in the right place
# Some pages seem to have a higher rotation than others
clean_image
#------------------------------------------------------------------------------#
#------------- IV. OCR --------------------------------------------------------#
#------------------------------------------------------------------------------#
# Step 1
box_param    <- list()
box_param$width  = (image_param$width)*0.5
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.1
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_organization_names = results$raw_tibble[,1]
total_rows = length(list_organization_names)
# Step 2: Create Data to fill
data <- tibble(box_value = rep(NA,total_rows),
index = rep(NA,total_rows),
name = list_organization_names)
# Step 3: Extract organization numbers
# This is done to properly extract the names of organizations
# that are written across more than one line.
for(i in 1:total_rows){
print(i)
#i          <- 15
box_param        <- list()
box_param$width  <- (image_param$width)*0.07
box_param$height <- (image_param$height / total_rows)
box_param$hstart <- (image_param$width)*0.03
box_param$vstart <- (i-1)*(image_param$height / total_rows)
# Conduct OCR
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
# Extract value from box
box_value   <- results$raw_tibble[1,1]
# Extract numeric value from box
regexp <- "[[:digit:]]+"      # This ensures that we only extract digits
value  <- as.numeric(str_extract(box_value, regexp))
if(i == 1){
value = value
} else{
if(box_value == ""){
value <- data[i-1,"index"]
} else {
value <- data[i-1,"index"] + 1
}
}
data[i,"box_value"] <- box_value
data[i,"index"]     <- value
}
# Process data to concatenate organization names that
# are written across multiple rows
data <- data %>% ungroup()
data <- data %>% group_by(index) %>%
summarise(box_value = paste(box_value,collapse = "|"),
name = paste(name,collapse = " ")) %>% ungroup()
data
# Step 4: Extract expiration date
box_param    <- list()
box_param$width  = (image_param$width)*0.2
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.6
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_mou_signing = results$raw_tibble[,1]
if( length(list_mou_signing) == nrow(data)){
data$list_mou_signing <- list_mou_signing
} else {
print("Number of rows of MOU does not match")
}
# Step 5: Extract expiration date
box_param    <- list()
box_param$width  = (image_param$width)*0.18
box_param$height = image_param$height
box_param$hstart = (image_param$width)*0.8
box_param$vstart = 0
results <- fn_extract_column(clean_image,box_param)
results$cropped_image
list_mou_validity = results$raw_tibble[,1]
if( length(list_mou_validity) == nrow(data)){
data$list_mou_validity <- list_mou_validity
} else {
print("Number of rows of MOU validity does not match")
}
data
