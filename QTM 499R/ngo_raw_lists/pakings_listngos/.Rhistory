# Import libraries
library(tidyverse)
library(ggplot2)
# Clear working environment
rm(list = ls())
dirhat <- "D:/Dropbox/University_Emory QTM/QTM 365/Homeworks/HW1"
# Question 3.(a)
# This creates a sequence between -10 and 10 with 10.000 points.
x  <- seq(-10,10, length.out = 10000)
g1 <- abs(x)/5
g2 <- 1*( abs(x) > 5)
# This creates a dataset with three variables X,g1,g2
data <- tibble(x,g1,g2)
# This is a graph that does the following
# ggplot(data) imports data
# geom_line(aes(...)) cretes a line plot
# scale_color_manual(...) gives labels to the legend
# theme(...) is a set of options. Here we positioned the legend to the right.
ggplot(data) +
geom_line(aes(x = x,y = g1, color = "blue")) +
geom_line(aes(x = x,y = g2, color = "red")) +
scale_color_manual(name = "Plots",
labels = c("g1","g2"),
values = c("blue","red")) +
theme(legend.position = "right")
ggsave(paste0(dirhat,"/figures/question3a.png"),
width = 12, height = 5)
ggsave(paste0(dirhat,"/figures/question3a.png"),
width = 6, height = 3.5)
X <- rnorm(1000,0,1)
Y <- (X-0.5)^2
Z <- (X+1)^2
hist(Y)
hist(Z)
# Generate a random vector from i.i.d. normal with mean zero and standard
# deviation one.
x <- rnorm(1000,0,1)
y <- (X-0.5)^2
z <- (X+1)^2
# Create dataset for Question 4:
data_q4 <- tibble(x = x, y=y, z=z)
hist(Y)
ggplot(data_q4) +
geom_hist(aes(x = x,"blue"))
ggplot(data_q4) +
geom_hist(aes(x = x,color = "blue"))
ggplot(data_q4) +
geom_histogram(aes(x = x,color = "blue"))
ggplot(data_q4) +
geom_histogram(aes(x = x))
ggplot(data_q4) +
geom_histogram(aes(y = y)) + xlim(0,15)
hist(Y, xlim = c(0,15))
hist(Z, xlim = c(0,15))
mean(Y)
# Obtain sample means
mean(Y) # (a)
mean(Z) # (b)
# Create dataset for Question 4:
data_q4 <- tibble(x = x, y=y, z=z)
# Export a figure as a ".png" file:
png(file=paste0(dirhat,"/figures/question5a.png"),
width=600, height=350)
hist(Y, xlim = c(0,15))
dev.off()
#------------------------------------------------------------------------------#
# QTM 365
# Homework 1 - R file
#------------------------------------------------------------------------------#
# Import libraries
library(tidyverse)
library(ggplot2)
# Clear working environment
rm(list = ls())
dirhat <- "D:/Dropbox/University_Emory QTM/QTM 365/Homeworks/HW1"
# Question 3.(a)
# This creates a sequence between -10 and 10 with 10.000 points.
x  <- seq(-10,10, length.out = 10000)
g1 <- abs(x)/5
g2 <- 1*( abs(x) > 5)
# This creates a dataset with three variables X,g1,g2 for Question 3
data_q3 <- tibble(x,g1,g2)
# This is a graph that does the following
# ggplot(data) imports data
# geom_line(aes(...)) cretes a line plot
# scale_color_manual(...) gives labels to the legend
# theme(...) is a set of options. Here we positioned the legend to the right.
ggplot(data_q3) +
geom_line(aes(x = x,y = g1, color = "blue")) +
geom_line(aes(x = x,y = g2, color = "red")) +
scale_color_manual(name = "Plots",
labels = c("g1","g2"),
values = c("blue","red")) +
theme(legend.position = "right")
ggsave(paste0(dirhat,"/figures/question3a.png"),
width = 6, height = 3.5)
# Question 4
# Generate a random vector from i.i.d. normal with mean zero and standard
# deviation one.
x <- rnorm(1000,0,1)
y <- (X-0.5)^2
#------------------------------------------------------------------------------#
# QTM 365
# Homework 1 - R file
#------------------------------------------------------------------------------#
# Import libraries
library(tidyverse)
library(ggplot2)
# Clear working environment
rm(list = ls())
dirhat <- "D:/Dropbox/University_Emory QTM/QTM 365/Homeworks/HW1"
# Question 3.(a)
# This creates a sequence between -10 and 10 with 10.000 points.
x  <- seq(-10,10, length.out = 10000)
g1 <- abs(x)/5
g2 <- 1*( abs(x) > 5)
# This creates a dataset with three variables X,g1,g2 for Question 3
data_q3 <- tibble(x,g1,g2)
# This is a graph that does the following
# ggplot(data) imports data
# geom_line(aes(...)) cretes a line plot
# scale_color_manual(...) gives labels to the legend
# theme(...) is a set of options. Here we positioned the legend to the right.
ggplot(data_q3) +
geom_line(aes(x = x,y = g1, color = "blue")) +
geom_line(aes(x = x,y = g2, color = "red")) +
scale_color_manual(name = "Plots",
labels = c("g1","g2"),
values = c("blue","red")) +
theme(legend.position = "right")
ggsave(paste0(dirhat,"/figures/question3a.png"),
width = 6, height = 3.5)
# Question 4
# Generate a random vector from i.i.d. normal with mean zero and standard
# deviation one.
x <- rnorm(1000,0,1)
y <- (x-0.5)^2
z <- (x+1)^2
# Obtain sample means
mean(Y) # (a)
#------------------------------------------------------------------------------#
# QTM 365
# Homework 1 - R file
#------------------------------------------------------------------------------#
# Import libraries
library(tidyverse)
library(ggplot2)
# Clear working environment
rm(list = ls())
dirhat <- "D:/Dropbox/University_Emory QTM/QTM 365/Homeworks/HW1"
# Question 3.(a)
# This creates a sequence between -10 and 10 with 10.000 points.
x  <- seq(-10,10, length.out = 10000)
g1 <- abs(x)/5
g2 <- 1*( abs(x) > 5)
# This creates a dataset with three variables X,g1,g2 for Question 3
data_q3 <- tibble(x,g1,g2)
# This is a graph that does the following
# ggplot(data) imports data
# geom_line(aes(...)) cretes a line plot
# scale_color_manual(...) gives labels to the legend
# theme(...) is a set of options. Here we positioned the legend to the right.
ggplot(data_q3) +
geom_line(aes(x = x,y = g1, color = "blue")) +
geom_line(aes(x = x,y = g2, color = "red")) +
scale_color_manual(name = "Plots",
labels = c("g1","g2"),
values = c("blue","red")) +
theme(legend.position = "right")
ggsave(paste0(dirhat,"/figures/question3a.png"),
width = 6, height = 3.5)
# Question 4
# Generate a random vector from i.i.d. normal with mean zero and standard
# deviation one.
x <- rnorm(1000,0,1)
y <- (x-0.5)^2
z <- (x+1)^2
# Obtain sample means
mean(y) # (a)
mean(z) # (b)
# Export a figure as a ".png" file:
png(file=paste0(dirhat,"/figures/question4a.png"),
width=600, height=350)
hist(y, xlim = c(0,15))
dev.off()
png(file=paste0(dirhat,"/figures/question4b.png"),
width=600, height=350)
hist(z, xlim = c(0,15))
dev.off()
#------------------------------------------------------------------------------#
# QTM 365
# Homework 1 - R file
#------------------------------------------------------------------------------#
# Import libraries
library(tidyverse)
library(ggplot2)
# Clear working environment
rm(list = ls())
dirhat <- "D:/Dropbox/University_Emory QTM/QTM 365/Homeworks/HW1"
# Question 3.(a)
# This creates a sequence between -10 and 10 with 10.000 points.
x  <- seq(-10,10, length.out = 10000)
g1 <- abs(x)/5
g2 <- 1*( abs(x) > 5)
# This creates a dataset with three variables X,g1,g2 for Question 3
data_q3 <- tibble(x,g1,g2)
# This is a graph that does the following
# ggplot(data) imports data
# geom_line(aes(...)) cretes a line plot
# scale_color_manual(...) gives labels to the legend
# theme(...) is a set of options. Here we positioned the legend to the right.
ggplot(data_q3) +
geom_line(aes(x = x,y = g1, color = "blue")) +
geom_line(aes(x = x,y = g2, color = "red")) +
scale_color_manual(name = "Plots",
labels = c("g1","g2"),
values = c("blue","red")) +
theme(legend.position = "right")
ggsave(paste0(dirhat,"/figures/question3a.png"),
width = 6, height = 3.5)
# Question 4
# Generate a random vector from i.i.d. normal with mean zero and standard
# deviation one.
x <- rnorm(1000,0,1)
y <- (x-0.5)^2
z <- (x+1)^2
# Obtain sample means
mean(y) # (a)
mean(z) # (b)
# Export a figure as a ".png" file:
png(file=paste0(dirhat,"/figures/question4a.png"),
width=600, height=350)
hist(y, xlim = c(0,15))
dev.off()
png(file=paste0(dirhat,"/figures/question4b.png"),
width=600, height=350)
hist(z, xlim = c(0,15))
dev.off()
# Export a figure as a ".png" file:
png(file=paste0(dirhat,"/figures/question4a.png"),
width=600, height=350)
hist(y, xlim = c(0,15))
dev.off()
png(file=paste0(dirhat,"/figures/question4b.png"),
width=600, height=350)
hist(z, xlim = c(0,15))
dev.off()
hist(y, xlim = c(0,15))
hist(z, xlim = c(0,15))
hist(y, xlim = c(0,15))
hist(z, xlim = c(0,15))
# Generate a random vector from i.i.d. normal with mean zero and standard
# deviation one.
x <- rnorm(1000,0,1)
y <- (x-0.5)^2
z <- (x+3)^2
# Obtain sample means
mean(y) # (a)
mean(z) # (b)
# Export a figure as a ".png" file:
png(file=paste0(dirhat,"/figures/question4a.png"),
width=600, height=350)
hist(y, xlim = c(0,15))
dev.off()
hist(y, xlim = c(0,15))
hist(z, xlim = c(0,15))
z <- (x+2)^2
hist(z, xlim = c(0,15))
# Generate a random vector from i.i.d. normal with mean zero and standard
# deviation one.
x <- rnorm(1000,0,1)
y <- (x-0.5)^2
z <- (x+2)^2
# Obtain sample means
mean(y) # (a)
mean(z) # (b)
# Export a figure as a ".png" file:
png(file=paste0(dirhat,"/figures/question4a.png"),
width=600, height=350)
hist(y, xlim = c(0,15))
dev.off()
png(file=paste0(dirhat,"/figures/question4b.png"),
width=600, height=350)
hist(z, xlim = c(0,15))
dev.off()
library(data.table)
d <- mtcars
library(data.table)
d <- mtcars
n <- 10000
k1<-rbindlist(replicate(n, d, simplify = FALSE))
k1[,factor_var:=rep(seq(1,80000),4)] #sample data
k1[,rand:=runif(nrow(k1),0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
k1[,rand:=runif(.N,0,1),factor_var]
for(t in 1:10){
k1[,rand:=runif(.N,0,1),factor_var]
}
for(t in 1:10){
print(t)
k1[,rand:=runif(.N,0,1),factor_var]
}
for(t in 1:20){
print(t)
k1[,rand:=runif(.N,0,1),factor_var]
}
dim(d)
dim(k1)
dim(k1)
nr <- nrow(k1)
nr
nr <- nrow(k1)
for(t in 1:20){
print(t)
k1[,rand:=runif(.N,0,1),factor_var]
}
View(d)
View(d)
View(k1)
View(k1)
rm(list = ls())
if(Sys.info()["user"] == "asanc31") {
dirhat     <- "" # TO BE DEFINED
} else if(Sys.getenv("USERNAME")=="asanc"){
dirhat  <- paste0("D:/Dropbox/W_PeerEffects/")
datadir <- paste0(dirhat,"Data/CleanData_2023/")
}
#------------------------------------------------------------------------------#
#------------------ SET UP WORKING ENVIRONMENT --------------------------------#
#------------------------------------------------------------------------------#
library('data.table')
library('tidyverse')
library('dplyr')
#
# library('dpglasso')
# install.packages('glassomd_0.1.0.tar.gz', repos = NULL, type='source')
#===============================================================================
# Define a different working directory depending on the computer:
# (a) Alejandro's Mac
# (b) Alejandro's PC
rm(list = ls())
if(Sys.info()["user"] == "asanc31") {
dirhat     <- "" # TO BE DEFINED
} else if(Sys.getenv("USERNAME")=="asanc"){
dirhat  <- paste0("D:/Dropbox/W_PeerEffects/")
}
# Secondary folders
datadir <- paste0(dirhat,"Data/CleanData_2023/")
1700000*0.06
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
#------------------------------------------------------------------------------#
# Process expert list -- first round
# Author: Alejandro Sanchez, Joel Becker
# Notes:
#
#------------------------------------------------------------------------------#
########################################################
######################## Set-up ########################
########################################################
# clear wd
rm(list = ls())
# load libraries
packages <- c(
"dplyr",        # Manage data cleaning
"haven",            # Imports Stata database
"readxl",           # Import excel files
"splitstackshape",  # Clean columns with lists (e.g. authors, categories,etc)
"bibtex",
"bib2df",
"rworldmap",
"stringr",          # Special operations with strings
"estimatr",
"openxlsx",
"tidyr",
"tidyverse",
"readr",
"plyr",
"feather", # Light data files
"janitor", # Tidy tables
"ggplot2"
)
new.packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(packages, library, character.only = TRUE)
main_dir           <- "D:/GitHub/expert-forecasting"
raw_dir <- paste0(main_dir, "/raw_data/3_get_policymaker_list/ngo_india_scraping")
stored_dir <- paste0(main_dir, "/output/3_get_policymaker_list/")
list_rawfiles_ngo <- list.files(path=raw_dir, pattern="*.csv", full.names=TRUE)
# scraped_data <- ldply(list_rawfiles_ngo, read_csv,show_col_types = FALSE)
# write_csv(scraped_data,paste0(stored_dir,"scraped_data_ngos_india.csv"))
scraped_data <- as_tibble(read_csv(paste0(stored_dir,"/scraped_data_ngos_india.csv")))
names(scraped_data)
# Check for e-mail information
mean(!is.na(scraped_data$contact_details_email))
mean(1*(scraped_data$contact_details_email != "Not Available"),na.rm = TRUE)
# Check for website information
mean(!is.na(scraped_data$contact_details_website))
mean(1*(scraped_data$contact_details_website != "Not Available"),na.rm = TRUE)
# Clean data
scraped_data <- mutate_if(scraped_data,is.character,
stringr::str_replace_all, pattern = "&amp;",
replacement = "&")
#--------------------------- SUMMARY STATS FOR FULL DATASET -------------------#
# Count NGOs scraped by state
# This is useful as a quality diagnostic because sometimes the scraping
# algorithm does not complete the data extraction due to interrupted connections.
table_countngos_state  <- as_tibble(scraped_data %>%
tabyl(sector_number, page_num)) %>%
select("sector_number",paste0(1:194))
# Check a specific page (for diagnostic)
check_page <- scraped_data %>%
filter(state_of_registration=="ANDHRA PRADESH",
page_num == 12)
# Count NGOs by state
table_state <- tibble(statefreq = table(scraped_data$sector_number))
data_intermediate <-scraped_data %>%
tabyl(state_of_registration, page_num)
sum(data_intermediate[10,-1] %>% as.matrix())
#--------------------------- SUBSET DATA BY ISSUES ----------------------------#
# Obtain list of key issues
key_issues_list <- unique(cSplit(scraped_data,
splitCols=c("key_issues"),
sep =",", direction="long",
type.convert = FALSE) %>% select(key_issues))
subset_keyissues <- c("Micro Finance (SHGs)",
"Rural Development & Poverty Alleviation",
"Urban Development & Poverty Alleviation",
"Labour & Employment",
"Women's Development & Empowerment",
"Micro Small & Medium Enterprise")
# Draw a subset of maybes:
# "Health & Family Welfare",
# "Vocational Training",
adjacent_keyissues <- c("Micro Small & Medium Enterprise",
"Information & Communication Technology",
"Nutrition",
"Skill Development")
excluded_keyissues <- setdiff(unlist(key_issues_list), c(subset_keyissues,
adjacent_keyissues))
excluded_keyissues <- c("Sports","Not Available","Art & Culture",
"Aged/Elderly","Differently Abled",
"Drinking Water","Environmental & Forests",
"HIV/AIDS","Housing",
"Micro Small & Medium Enterprises",
"Tourism",
"Animal Husbandry",
"Dairying & Fisheries",
"Biotechnology",
"Prisoner's Issues",
"New & Renewable Energy",
"Tribal Affairs",
"Water Resources")
subset_ngos <- scraped_data %>%
filter(grepl(paste0(subset_keyissues,collapse = "|"), key_issues)) %>%
filter(!grepl(paste0(excluded_keyissues,collapse = "|"), key_issues))
subset_ngos
#------------------------- Compute Descriptive Statistics ---------------------#
# When were NGOs founded?
hist(as.Date(subset_ngos$registration_date,format = c("%d-%m-%Y")),
breaks = 50)
# What states do the NGOs belong to
ggplot(subset_ngos,aes(x=state_of_registration)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#ggplot(scraped_data,aes(x=state_of_registration)) +
#  geom_bar() +
#  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# How many of them list a website
mean(1*(subset_ngos$contact_details_website != "Not Available"),na.rm = TRUE)
table(subset_ngos$type_of_ngo)
write_csv(subset_ngos,paste0(stored_dir,"subset_ngos_india.csv"))
#------------------------- Compute Descriptive Statistics ---------------------#
# When were NGOs founded?
hist(as.Date(subset_ngos$registration_date,format = c("%d-%m-%Y")),
breaks = 50)
# What states do the NGOs belong to
ggplot(subset_ngos,aes(x=state_of_registration)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# How many of them list a website
mean(1*(subset_ngos$contact_details_website != "Not Available"),na.rm = TRUE)
table(subset_ngos$type_of_ngo)
data_intermediate
pnorm(0.7)-pnorm(0.2)
install.packages("tesseract")
library("tesseract")
install.packages("pdftools")
install.packages("tesseract")
install.packages("devtools")
install.pacakages("tesseract")
install.packages("tesseract")
library("pdftools")
install.packages("tesseract")
library("tesseract")
setwd("D:\OneDrive - Emory University\QTM 499R\ngo_raw_lists\pakings_listngos")
setwd("D:/OneDrive - Emory University/QTM 499R/ngo_raw_lists/pakings_listngos")
